	ModuleNames : {
		"Client"
		"Common"
		"E2E"
		"Logic"
		"Storage"
		"Test Driver"
		"UI"
	}

	ModuleDescriptions : {
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. The Client component can connect to the back end directly without using a Web browser. The Client component contains scripts that can connect directly to the application back-end for administrative purposes, such as migrating data to a new schema and calculating statistics."
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. The Common component contains utility code (data transfer objects, helper classes, etc.) used across the application. The Common component contains common utilities used across TEAMMATES. x.datatransfer contains component test cases for testing the datatransfer objects from the Common component. x.util contains component test cases for testing the utility classes from the Common component."
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. The E2E end-to-end component is used to interact with the application as a whole with Web browsers. The E2E component has no knowledge of the internal workings of the application and can only interact either with Web browser as a whole application or REST API calls for the back-end logic."
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. In the UI Server the entry point for the application back end logic is designed as a REST-ful controller. If the action is allowed, it will be performed, interacting with the Logic component as necessary. Seventh, the corresponding AutomatedAction will be performed, interacting with the Logic component as necessary. The Logic component handles the business logic of TEAMMATES. In particular, it is responsible for the following. Logic API is represented by the classes Logic, GateKeeper, EmailGenerator, EmailSender, TaskQueuer. The UI is expected to check access control (using GateKeeper class) before calling a method in the Logic. Hiding the complexities of datastore from the Logic component. Cascade logic is handled by the Logic component. storage.api provides the API of the component to be accessed by the logic component. x.logic contains component test cases for testing the Logic component. The E2E component has no knowledge of the internal workings of the application and can only interact either with Web browser as a whole application or REST API calls for the back-end logic."
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. The storage layer of the application uses the persistence framework provided by GAE Datastore, a NoSQL database. Logic is a Facade class which connects to the several Logic classes to handle the logic related to various types of data and to access data from the Storage component. Entity already exists throws EntityAlreadyExistsException (escalated from Storage level). The Storage component performs CRUD (Create, Read, Update, Delete) operations on data entities individually. In particular, it is reponsible for the following. All GQL queries are to be contained inside the Storage component. The Storage component does not perform any cascade delete/create operations. x.storage contains component test cases for testing the Storage component."
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. The following explains the use of the Test Driver. Test Driver can use the DataBundle in this manner to send an arbitrary number of objects to be persisted in the database. This component automates the testing of TEAMMATES."
		"Architecture contains UI Component, Logic Component, Storage Component, Common Component, Test Driver Component, E2E Component, Client Component. The UI Browser seen by users consists of Web pages containing HTML, CSS for styling and JavaScript for client-side interactions such as sorting, input validation, etc.. This UI is a single HTML page generated by Angular framework. In the UI Server the entry point for the application back end logic is designed as a REST-ful controller. The diagram below shows the object structure of the UI component. The UI component is the first stop for 99% of all requests that are received by the application. Sanitizing input values received from the UI component. logic.api provides the API of the component to be accessed by the UI. The UI is expected to check access control (using GateKeeper class) before calling a method in the Logic."
	}
